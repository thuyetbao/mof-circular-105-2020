[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mof-circular-105-2020"
dynamic = ["version"]
description = "Implement the Circular 105/2020 from Ministry of Finance"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["mof-circular-105-2020", "python3"]
authors = [{ name = "Bao Truong", email = "trthuyetbao@gmail.com" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/thuyetbao/mof-circular-105-2020#README"
Issues = "https://github.com/thuyetbao/mof-circular-105-2020/issues"
Source = "https://github.com/thuyetbao/mof-circular-105-2020"

[tool.hatch.version]
path = "mof_circular_105_2020/__init__.py"

[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest>=8.2.0,<8.5.0",
  "ruff>=0.4.8,<0.5.0",
  "pyclean"
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:mof_circular_105_2020 tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py312"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py312"
include = ["*.py"]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["mof_circular_105_2020"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["mof_circular_105_2020", "tests"]
branch = true
parallel = true
omit = ["mof_circular_105_2020/__init__.py"]
dependencies = []

[tool.coverage.paths]
mof_circular_105_2020 = [
  "mof_circular_105_2020",
  "*/mof-circular-105-2020/mof_circular_105_2020",
]
tests = ["tests", "*/mof-circular-105-2020/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs"]

[tool.hatch.build.targets.wheel]
packages = ["mof_circular_105_2020"]

[tool.hatch.publish.index]
disable = false
